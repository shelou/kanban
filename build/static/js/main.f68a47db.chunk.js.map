{"version":3,"sources":["components/StoryCard.tsx","components/Column.tsx","redux/hooks.ts","data/columns.ts","services/column.service.ts","routes/lists.tsx","utils/constants.ts","components/ListItemLink.tsx","components/LeftNavigation.tsx","components/Header.tsx","components/Layout.tsx","components/AddStoryModal.tsx","data/stories.ts","services/story.service.ts","redux/reducers/storySlice.ts","redux/reducers/columnsSlice.ts","components/ConfirmDialog.tsx","routes/Backlog.tsx","sagas/actions.ts","routes/EditStory.tsx","App.tsx","reportWebVitals.ts","sagas/fetchColumns-saga.ts","sagas/fetchStories-saga.ts","sagas/index.tsx","redux/store.ts","index.tsx"],"names":["StoryCard","id","index","story","navigate","useNavigate","onClick","Container","maxWidth","style","marginBottom","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","Card","sx","CardHeader","avatar","Avatar","assignedTo","charAt","action","IconButton","title","subheader","CardContent","Chip","label","Column","column","stories","droppableId","border","borderRadius","padding","backgroundColor","isDraggingOver","minHeight","droppableProps","color","placeholder","storyIds","map","item","str","find","element","useAppDispatch","useDispatch","useAppSelector","useSelector","Columns","ColumnService","_id","columns","c","columnsService","Lists","state","useState","columnsData","setColumnsData","useEffect","Grid","container","spacing","xs","onDragEnd","result","source","destination","sourceColumn","getColumnByID","reorderedStories","list","startIndex","endIndex","Array","from","splice","removed","reorder","srcColumn","newArray","filter","push","sourceColumnObj","destColumnObj","sourceStories","Object","values","destinationStories","tempArray","obj","o","_","md","DRAWER_WIDTH","Date","getFullYear","ListItemLink","props","icon","primary","to","renderLink","useMemo","forwardRef","itemProps","role","undefined","ListItem","button","component","ListItemIcon","ListItemText","LeftNavigation","Drawer","width","flexShrink","boxSizing","variant","anchor","Toolbar","Divider","List","Header","AppBar","position","ml","Typography","noWrap","Layout","Box","display","CssBaseline","flexGrow","bgcolor","p","AddStoryModal","open","handleClose","handleSave","formik","useFormik","initialValues","description","onSubmit","Dialog","onClose","DialogTitle","handleSubmit","DialogContent","TextField","autoFocus","margin","value","onChange","handleChange","type","fullWidth","DialogActions","Button","Stories","StoryService","userData","uuidv4","newStory","newStories","newStoryId","_sourcedId","storySlice","createSlice","name","initialState","reducers","setAll","payload","actions","columnSlice","ConfirmDialog","btnClicked","handleConfirmation","dialogContentText","DialogContentText","disabled","storyService","Backlog","dispatch","setColumn","addDialogOpen","setAddDialogOpen","dialogBtnClicked","setDialogBtnClicked","deleteDialogOpen","setDeleteDialogOpen","storyId","storyToDelete","setStoryToDelete","mt","mb","justifyContent","alignItems","_story","array","secondaryAction","Tooltip","edge","length","moveToBoard","ArrowUpward","_storyId","_index","Delete","ListItemAvatar","Assignment","updated","createStory","setStories","oldStoryIds","newColumn","tempColumns","e","console","log","s","backlogColumn","sagaActions","EditStory","useParams","isEdit","setEditMode","isSubmitting","setStory","setFieldValue","updatedStory","tempStories","FormControl","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fetchColumns","mySaga","columnService","call","getColumns","put","takeLatest","fetchStories","getStories","IndexSagas","all","sagaMiddleware","createSagaMiddleware","allReducers","combineReducers","columnsSlice","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","getDefaultMiddleware","thunk","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistStore","run","rootElement","document","getElementById","ReactDOM","render","StyledEngineProvider","injectFirst"],"mappings":"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","file":"static/js/main.f68a47db.chunk.js","sourcesContent":["import {Avatar, Card, CardContent, CardHeader, Chip, Container, IconButton} from \"@mui/material\";\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {useNavigate, useParams} from 'react-router-dom'\r\n\r\nimport {IStory} from \"../data/stories\";\r\n\r\ninterface Props {\r\n    id: string,\r\n    index: number,\r\n    story: IStory\r\n}\r\n\r\nconst StoryCard = ({id, index, story}: Props) => {\r\n    const navigate = useNavigate();\r\n    const onClick = () => {\r\n        navigate(`/stories/${id}`)\r\n    };\r\n\r\n    return (\r\n            <Container maxWidth=\"sm\" key={id} style={{marginBottom:\"15px\"}}>\r\n                <Draggable draggableId={id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                        >\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                                <CardHeader\r\n                                    avatar={\r\n                                        <Avatar aria-label=\"recipe\">\r\n                                            {story.assignedTo?.charAt(0)}\r\n                                        </Avatar>\r\n                                    }\r\n                                    action={\r\n                                        <IconButton aria-label=\"settings\" onClick={onClick}>\r\n                                            <OpenInNewIcon />\r\n                                        </IconButton>\r\n                                    }\r\n                                    title={story.title}\r\n                                    subheader={story.id}\r\n                                />\r\n                                <CardContent>\r\n                                    <Chip label={story.assignedTo} />\r\n                                </CardContent>\r\n\r\n                            </Card>\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n    )\r\n}\r\n\r\nexport default StoryCard;","import {Droppable} from \"react-beautiful-dnd\";\r\nimport {Container} from \"@mui/material\";\r\nimport {Stories, IStory} from \"../data/stories\";\r\nimport StoryCard from \"./StoryCard\";\r\nimport {columnObj} from \"../data/columns\";\r\n\r\ninterface Props{\r\n    column : {\r\n        id: string,\r\n        storyIds: Array<string>\r\n    },\r\n    title: string,\r\n    stories: IStory[]\r\n}\r\n\r\nexport const Column = ({column, title,stories}: any) =>{\r\n    return(\r\n            <Droppable droppableId={column.id} key={column.id}>\r\n                {(provided, snapshot) => (\r\n                    <Container style={{\r\n                        border: \"1px solid lightgrey\",\r\n                        borderRadius: \"2px\",\r\n                        padding: \"6px\",\r\n                        marginBottom: \"8px\",\r\n                        backgroundColor: snapshot.isDraggingOver ? '#939FB6' : '#f4f5f7',\r\n                        minHeight: \"600px\"\r\n                    }}\r\n                               ref={provided.innerRef}\r\n                               {...provided.droppableProps}\r\n                    >\r\n                        <h3 style={{color: \"Gray\"}}>{title}</h3>\r\n                        {provided.placeholder}\r\n                        {column.storyIds.map(\r\n                            ((item: string, index: any) => {\r\n                                let str: IStory | undefined = stories.find((element : any) => {\r\n                                        if (element.id === item) {\r\n                                            return element;\r\n                                        }\r\n                                    }\r\n                                )\r\n                                if (str && str) {\r\n                                    return (\r\n                                        <StoryCard id={str?.id} index={index} story={str}/>\r\n                                    )\r\n                                }\r\n                            })\r\n                        )}\r\n                    </Container>\r\n\r\n                )}\r\n            </Droppable>\r\n    )\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// While it's possible to import the RootState and AppDispatch types into each component,\r\n// it's better to create typed versions of the useDispatch and useSelector hooks for usage in your application.\r\n// Use throughout your redux instead of plain `useDispatch` and `useSelector`\r\n// https://react-redux.js.org/tutorials/typescript-quick-start\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export interface columnObj {\r\n    id: string,\r\n    title: string,\r\n    storyIds: string[]\r\n}\r\n\r\nlet Columns:  columnObj [] =[\r\n    {\r\n        id: 'column_0',\r\n        title: 'Backlog',\r\n        storyIds: ['story-0'],\r\n    },\r\n   {\r\n        id: 'column_1',\r\n        title: 'To do',\r\n        storyIds: ['story-11', 'story-1'],\r\n    },\r\n   {\r\n        id: 'column_2',\r\n        title: 'In Progress',\r\n        storyIds: ['story-2'],\r\n    },\r\n    {\r\n        id: 'column_3',\r\n        title: 'Done',\r\n        storyIds: ['story-3'],\r\n    },\r\n];\r\n\r\nexport {Columns}","import {columnObj, Columns} from \"../data/columns\";\r\n\r\nexport class ColumnService {\r\n    getColumns() {\r\n        return Columns;\r\n    }\r\n\r\n    getColumnByID(_id: string, columns: columnObj[]) {\r\n        return columns.find(c => c.id === _id)\r\n    }\r\n}","import {Container, Grid} from \"@mui/material\";\r\nimport {DragDropContext, DropResult, ResponderProvided} from 'react-beautiful-dnd';\r\nimport {useEffect, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport {Column} from \"../components/Column\";\r\nimport {useAppSelector} from \"../redux/hooks\";\r\nimport {columnObj} from \"../data/columns\";\r\nimport {ColumnService} from \"../services/column.service\";\r\nimport {EditStory} from \"./EditStory\";\r\n\r\nconst columnsService = new ColumnService();\r\n\r\nexport default function Lists() {\r\n    const {columns} = useAppSelector((state) => state.columns)\r\n    const {stories} = useAppSelector((state) => state.stories)\r\n    const [columnsData, setColumnsData] = useState(columns);\r\n\r\n    useEffect(() => {\r\n        setColumnsData(columns);\r\n    }, [columns]);\r\n\r\n    const reorder = (list: string[], startIndex: number, endIndex: number) => {\r\n        const result: string[] = Array.from(list);\r\n        const [removed] = result.splice(startIndex, 1);\r\n        result.splice(endIndex, 0, removed);\r\n        return result;\r\n    };\r\n\r\n    const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\r\n        const {source, destination, draggableId} = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const sourceColumn = columnsService.getColumnByID(source.droppableId,columnsData);\r\n            const reorderedStories: string[] = reorder(\r\n                sourceColumn?.storyIds || [],\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            const srcColumn: columnObj = {\r\n                id: source.droppableId,\r\n                title: sourceColumn?.title || '',\r\n                storyIds: reorderedStories\r\n            }\r\n\r\n            let newArray = columnsData.filter(c => c.id !== source.droppableId);\r\n            newArray.push(srcColumn)\r\n            setColumnsData(newArray);\r\n\r\n        } else {\r\n            const sourceColumnObj: columnObj | undefined = columnsService.getColumnByID(source.droppableId,columnsData);\r\n            const destColumnObj: columnObj | undefined = columnsService.getColumnByID(destination.droppableId,columnsData);\r\n            const sourceStories: string[] = Object.values(sourceColumnObj?.storyIds || []);\r\n            let destinationStories: string[] =Object.values(destColumnObj?.storyIds || []);\r\n            destinationStories.splice(destination.index, 0, draggableId)\r\n            sourceStories.splice(source.index,1)\r\n\r\n            const sourceColumn: columnObj ={\r\n                id: source.droppableId,\r\n                title: sourceColumnObj?.title || '',\r\n                storyIds: sourceStories\r\n            };\r\n\r\n            const destColumn: columnObj ={\r\n                id: destination.droppableId,\r\n                title: destColumnObj?.title || '',\r\n                storyIds: destinationStories\r\n            };\r\n\r\n            const tempArray = [sourceColumn,destColumn];\r\n            const newArray = columnsData.map(obj => tempArray.find(o => o.id === obj.id) || obj)\r\n\r\n            setColumnsData(newArray)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={8}>\r\n                    <h2>Project Board</h2>\r\n                </Grid>\r\n            </Grid>\r\n            <div>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    {!_.isEmpty(columnsData) ? (\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Column column={columnsService.getColumnByID(\"column_1\",columnsData)} stories={stories} title={\"To Do\"}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Column column={columnsService.getColumnByID(\"column_2\",columnsData)} stories={stories} title={\"In Progress\"}/>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={4}>\r\n                                <Column column={columnsService.getColumnByID(\"column_3\",columnsData)} stories={stories} title={\"Done\"}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    ) : (<></>)\r\n                    }\r\n                </DragDropContext>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","export const FOOTER_TEXT = `${new Date().getFullYear()}`\r\nexport const FOOTER_HEIGHT = 30\r\nexport const HEADER_HEIGHT = 60\r\nexport const DRAWER_WIDTH = 240\r\n","import {ListItem, ListItemIcon, ListItemText} from \"@mui/material\";\r\nimport {forwardRef, useMemo} from \"react\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps,} from 'react-router-dom';\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nexport const ListItemLink = (props: ListItemLinkProps) => {\r\n    const {icon, primary, to} = props;\r\n\r\n    const renderLink = useMemo(\r\n        () =>\r\n            forwardRef<HTMLAnchorElement, Omit<RouterLinkProps, 'to'>>(function Link(\r\n                itemProps,\r\n                ref,\r\n            ) {\r\n                return <RouterLink to={to} ref={ref} {...itemProps} role={undefined}/>;\r\n            }),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <ListItemText primary={primary}/>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}","import * as React from 'react';\r\nimport {Divider, Drawer, List, ListItem, Toolbar} from '@mui/material';\r\nimport {DRAWER_WIDTH} from \"../utils/constants\";\r\nimport {ListItemLink} from \"./ListItemLink\";\r\n\r\nexport default function LeftNavigation() {\r\n    return (\r\n        <Drawer\r\n            sx={{\r\n                width: DRAWER_WIDTH,\r\n                flexShrink: 0,\r\n                '& .MuiDrawer-paper': {\r\n                    width: DRAWER_WIDTH,\r\n                    boxSizing: 'border-box',\r\n                },\r\n            }}\r\n            variant=\"permanent\"\r\n            anchor=\"left\"\r\n        >\r\n            <Toolbar/>\r\n            <Divider/>\r\n            <List>\r\n                <ListItem button key={\"Board\"}>\r\n                    <ListItemLink primary={\"Your Board\"} to={\"/\"} />\r\n                </ListItem>\r\n                <ListItem button key={\"Backlog\"}>\r\n                    <ListItemLink primary={\"Backlog\"} to={\"/backlog\"} />\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport {AppBar, Toolbar,} from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {DRAWER_WIDTH} from \"../utils/constants\";\r\n\r\nfunction Header() {\r\n    return (\r\n            <AppBar\r\n                position=\"fixed\"\r\n                sx={{width: `calc(100% - ${DRAWER_WIDTH}px)`, ml: `${DRAWER_WIDTH}px`}}\r\n            >\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" noWrap component=\"div\">\r\n                        KanBan\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {Box, CssBaseline, Toolbar} from \"@mui/material\";\r\n\r\n// components\r\nimport LeftNavigation from \"./LeftNavigation\";\r\n// constants\r\nimport Header from \"./Header\";\r\nimport {Outlet} from \"react-router-dom\";\r\n\r\n// functional component\r\nfunction Layout() {\r\n    return (\r\n        <Box sx={{ display: 'flex' }}>\r\n            <CssBaseline/>\r\n            <Header/>\r\n            <LeftNavigation/>\r\n            <Box\r\n                component=\"main\"\r\n                sx={{flexGrow: 1, bgcolor: 'background.default', p: 3}}\r\n            >\r\n                <Toolbar />\r\n                <div/>\r\n                <Outlet/>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Layout;","import {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\r\nimport {MouseEventHandler} from \"react\";\r\nimport {useFormik} from 'formik';\r\n\r\ninterface Props {\r\n    title: string,\r\n    open: boolean,\r\n    // btnClicked?: boolean,\r\n    handleSave: any,\r\n    handleClose: MouseEventHandler<any>,\r\n    // handleConfirmation?: MouseEventHandler<any>,\r\n}\r\n\r\ninterface MyFormValues {\r\n    title: string,\r\n    description: string\r\n}\r\n\r\nconst AddStoryModal = ({open, title, handleClose, handleSave}: Props) => {\r\n\r\n    const initialValues: MyFormValues = {\r\n        title: '',\r\n        description: '',\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        onSubmit: handleSave,\r\n\r\n    });\r\n    return (\r\n        <div>\r\n\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"title\"\r\n                            value={formik.values.title}\r\n                            onChange={formik.handleChange(\"title\")}\r\n                            label=\"Title\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                        />\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"description\"\r\n                            value={formik.values.description}\r\n                            onChange={formik.handleChange(\"description\")}\r\n                            label=\"Description\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>\r\n\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {AddStoryModal}","// import {Status} from \"../enumerations/StoryStatus\";\r\n\r\nexport interface IStory {\r\n    id: string,\r\n    title:string,\r\n    description: string,\r\n    assignedTo?: string,\r\n    // status: Status\r\n}\r\n\r\nlet Stories: Array<IStory> = [\r\n    {\r\n        id:\"story-0\",\r\n        title: \"To be moved to todo\",\r\n        description: \"Test\",\r\n        assignedTo: \"Maria\",\r\n        // status: Status.BACKLOG\r\n    },\r\n    {\r\n        id:\"story-1\",\r\n        title: \"Get Requirements\",\r\n        description: \"Have a call with the client to get the module requirements\",\r\n        assignedTo: \"John\",\r\n        // status: Status.TODO\r\n    },\r\n    {\r\n        id:\"story-11\",\r\n        title: \"Get Requirements11\",\r\n        description: \"Have a call with the client to get the module requirements\",\r\n        assignedTo: \"John\",\r\n        // status: Status.TODO\r\n    },\r\n    {\r\n        id:\"story-2\",\r\n        title: \"Get Requirements1\",\r\n        description: \"Have a call with the client to get the module requirements\",\r\n        assignedTo: \"Marcus\",\r\n        // status: Status.IN_PROGRESS\r\n    },\r\n    {\r\n        id:\"story-3\",\r\n        title: \"Get Requirements2\",\r\n        description: \"Have a call with the client to get the module requirements\",\r\n        assignedTo: \"Hannah\",\r\n        // status: Status.DONE\r\n    },\r\n]\r\n\r\nexport {Stories};","import {v4 as uuidv4} from \"uuid\";\r\nimport * as _ from \"lodash\";\r\nimport {Stories, IStory} from \"../data/stories\";\r\n\r\ninterface CreateStory {\r\n    title: string,\r\n    description: string\r\n}\r\n\r\nexport class StoryService {\r\n    createStory(userData: CreateStory, stories: Array<IStory>) {\r\n        const _id = `story-${uuidv4()}`;\r\n        const newStory = {\r\n            id: _id,\r\n            title: userData.title,\r\n            description: userData.description,\r\n        }\r\n\r\n        const newStories = _.cloneDeep(stories);\r\n        newStories.push(newStory)\r\n\r\n        return {\r\n            stories: newStories,\r\n            newStoryId: _id,\r\n        };\r\n    }\r\n\r\n    getStories() {\r\n        return Stories;\r\n    }\r\n\r\n    getStoryById(id: string) {\r\n        return \"\";\r\n    }\r\n\r\n    editStory(values: any, id: string) {\r\n        const myInit = {\r\n            body: {\r\n                title: values.title\r\n            },\r\n        };\r\n        return \"\";\r\n    }\r\n\r\n    deleteStory(_sourcedId: string) {\r\n        return \"\";\r\n    }\r\n}","import {createSlice} from '@reduxjs/toolkit';\r\n\r\n\r\ninterface Props{\r\n    stories: any[];\r\n}\r\nconst initialState:Props ={\r\n    stories: []\r\n}\r\n\r\nconst storySlice = createSlice({\r\n    name: \"stories\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAll: (state, action) => {\r\n            state.stories = action.payload;\r\n        },\r\n    }\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {setAll} = storySlice.actions;\r\n\r\nexport default storySlice.reducer;","import {createSlice} from '@reduxjs/toolkit';\r\nimport {columnObj} from \"../../data/columns\";\r\n\r\ninterface Props{\r\n    columns: columnObj[];\r\n}\r\nconst initialState:Props ={\r\n    columns: []\r\n}\r\n\r\nconst columnSlice = createSlice({\r\n    name: \"columns\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAll: (state, action) => {\r\n            state.columns = action.payload;\r\n        },\r\n    }\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {setAll} = columnSlice.actions;\r\n\r\nexport default columnSlice.reducer;","import React, {MouseEventHandler} from 'react'\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@mui/material\";\r\n\r\ninterface Props {\r\n    title: string,\r\n    dialogContentText:string,\r\n    open: boolean,\r\n    btnClicked: boolean,\r\n    handleClose: MouseEventHandler<any>,\r\n    handleConfirmation: MouseEventHandler<any>,\r\n}\r\n\r\nconst ConfirmDialog = ({open, btnClicked, handleClose, handleConfirmation, title, dialogContentText}: Props) => {\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {dialogContentText}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleConfirmation} color=\"primary\" disabled={btnClicked}>\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"primary\" disabled={btnClicked} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConfirmDialog;","import {\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    Grid,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Tooltip,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport * as _ from \"lodash\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {ArrowUpward, Assignment, Delete} from \"@mui/icons-material\";\r\n\r\nimport {IStory} from \"../data/stories\";\r\nimport {useAppDispatch, useAppSelector} from \"../redux/hooks\";\r\nimport {AddStoryModal} from \"../components/AddStoryModal\";\r\nimport {StoryService} from \"../services/story.service\";\r\nimport {setAll as setStories} from \"../redux/reducers/storySlice\";\r\nimport {setAll} from \"../redux/reducers/columnsSlice\";\r\nimport {ColumnService} from \"../services/column.service\";\r\nimport {columnObj} from \"../data/columns\";\r\nimport ConfirmDialog from \"../components/ConfirmDialog\";\r\n\r\nconst storyService = new StoryService();\r\nconst columnsService = new ColumnService();\r\n\r\nexport const Backlog = () => {\r\n    const dispatch = useAppDispatch();\r\n    const {columns} = useAppSelector((state) => {\r\n        return state.columns;\r\n    })\r\n    const {stories} = useAppSelector((state) => {\r\n        return state.stories\r\n    })\r\n    const [column, setColumn] = useState(columnsService.getColumnByID(\"column_0\", columns));\r\n    const [addDialogOpen, setAddDialogOpen] = useState(false);\r\n    const [dialogBtnClicked, setDialogBtnClicked] = useState(false);\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n    const [storyToDelete, setStoryToDelete] = useState({\r\n        storyId: '',\r\n        index: -1\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!_.isEmpty(columns))\r\n            setColumn(columnsService.getColumnByID(\"column_0\", columns))\r\n    }, [columns])\r\n\r\n    const handleClose = () => {\r\n        setAddDialogOpen(false);\r\n        setDeleteDialogOpen(false)\r\n    }\r\n\r\n    const handleDeleteClick = (_storyId: string, _index: any) => {\r\n        setDeleteDialogOpen(true);\r\n        setStoryToDelete({\r\n            storyId: _storyId,\r\n            index: _index\r\n        })\r\n    }\r\n\r\n    const deleteStory = () => {\r\n        setDialogBtnClicked(true);\r\n        let newStories = stories.filter(s => s.id !== storyToDelete.storyId)\r\n        dispatch(setStories(newStories));\r\n        const backlogColumn: columnObj | undefined = columnsService.getColumnByID(\"column_0\", columns);\r\n        const storyIds: string[] = Object.values(backlogColumn?.storyIds || []);\r\n        storyIds.splice(storyToDelete.index, 1)\r\n        const sourceColumn: columnObj = {\r\n            id: \"column_0\",\r\n            title: backlogColumn?.title || '',\r\n            storyIds: storyIds\r\n        };\r\n        const tempArray = [sourceColumn];\r\n        const newArray = columns.map(obj => tempArray.find(o => o.id === obj.id) || obj)\r\n        dispatch(setAll(newArray))\r\n        setDeleteDialogOpen(false)\r\n    }\r\n\r\n    const moveToBoard = (storyId: string, index: any) => {\r\n        // move the story to to do column\r\n        const sourceColumnObj: columnObj | undefined = columnsService.getColumnByID(\"column_0\", columns);\r\n        const destColumnObj: columnObj | undefined = columnsService.getColumnByID(\"column_1\", columns);\r\n        const sourceStories: string[] = Object.values(sourceColumnObj?.storyIds || []);\r\n        let destinationStories: string[] = Object.values(destColumnObj?.storyIds || []);\r\n        destinationStories.splice(destinationStories.length, 0, storyId)\r\n        sourceStories.splice(index, 1)\r\n\r\n        const sourceColumn: columnObj = {\r\n            id: \"column_0\",\r\n            title: sourceColumnObj?.title || '',\r\n            storyIds: sourceStories\r\n        };\r\n\r\n        const destColumn: columnObj = {\r\n            id: \"column_1\",\r\n            title: destColumnObj?.title || '',\r\n            storyIds: destinationStories\r\n        };\r\n\r\n        const tempArray = [sourceColumn, destColumn];\r\n        const newArray = columns.map(obj => tempArray.find(o => o.id === obj.id) || obj)\r\n        dispatch(setAll(newArray))\r\n    }\r\n\r\n    const handleSave = ({title, description}: any) => {\r\n        try {\r\n            setAddDialogOpen(false);\r\n            const updated = storyService.createStory({title, description}, stories);\r\n            // // update backlog column\r\n            dispatch(setStories(updated.stories));\r\n            let oldStoryIds = Object.values(column?.storyIds || []);\r\n            oldStoryIds.push(updated.newStoryId)\r\n            const newColumn = {\r\n                id: column?.id || '',\r\n                title: column?.title || '',\r\n                storyIds: oldStoryIds\r\n            }\r\n            let tempColumns = columns.filter(c => c.id !== \"column_0\");\r\n            tempColumns.push(newColumn)\r\n            dispatch(setAll(tempColumns))\r\n            setAddDialogOpen(false);\r\n        } catch (e) {\r\n            setAddDialogOpen(false);\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setAddDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{flexGrow: 1, maxWidth: 752}}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={8} md={8}>\r\n                        <Typography sx={{mt: 4, mb: 2}} variant=\"h6\" component=\"div\">\r\n                            Backlog Stories\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Box component=\"span\" sx={{\r\n                            p: 2, border: '1px', justifyContent: \"right\",\r\n                            display: \"flex\",\r\n                            alignItems: \"right\"\r\n                        }}>\r\n                            <Button color={\"primary\"} variant={\"contained\"} onClick={handleClickOpen}>Add</Button>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} md={12}>\r\n                        <List>\r\n                            {!_.isEmpty(column) && column?.storyIds.map(\r\n                                ((item: string, index: any) => {\r\n                                    let _story: IStory | undefined = stories.find((element, index, array) => {\r\n                                            if (element.id === item) {\r\n                                                return element;\r\n                                            }\r\n                                        }\r\n                                    )\r\n                                    if (_story) {\r\n                                        return (\r\n                                            <> <ListItem\r\n                                                secondaryAction=\r\n                                                    {<div><Tooltip title=\"Move to Board\">\r\n                                                        <IconButton edge=\"end\" aria-label=\"todo\"\r\n                                                                    onClick={() => moveToBoard(_story?.id || '', index)}>\r\n                                                            <ArrowUpward/>\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                        <Tooltip title=\"Delete\">\r\n                                                            <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteClick(_story?.id || '', index)}>\r\n                                                                <Delete/>\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    </div>\r\n                                                    }\r\n                                            >\r\n                                                <\r\n                                                    ListItemAvatar>\r\n                                                    <Avatar>\r\n                                                        <Assignment/>\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText\r\n                                                    primary={_story.title}\r\n                                                />\r\n                                            </ListItem>\r\n                                                <Divider/>\r\n                                            </>\r\n                                        )\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </List>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <AddStoryModal title={\"Create New Story\"} open={addDialogOpen} handleClose={handleClose}\r\n                               handleSave={handleSave}/>\r\n                <ConfirmDialog title={\"Confirm Delete Account\"} open={deleteDialogOpen} handleClose={handleClose}\r\n                               dialogContentText={\"Are you sure you want to remove this item?\"}\r\n                               handleConfirmation={deleteStory} btnClicked={dialogBtnClicked}/>\r\n            </Box>\r\n        </>\r\n    )\r\n        ;\r\n}","export const sagaActions = {\r\n    FETCH_STORIES_SAGA: \"FETCH_STORIES_SAGA\",\r\n    FETCH_COLUMNS_SAGA: \"FETCH_COLUMNS_SAGA\",\r\n};","import {Button, DialogActions, DialogContent, FormControl, TextField} from \"@mui/material\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useFormik} from 'formik';\r\nimport {useAppDispatch, useAppSelector} from \"../redux/hooks\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {IStory} from \"../data/stories\";\r\nimport {setAll} from \"../redux/reducers/storySlice\";\r\n\r\ninterface MyFormValues {\r\n    title: string,\r\n    description: string\r\n}\r\n\r\nconst EditStory = () => {\r\n    const {id} = useParams();\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n    const {stories} = useAppSelector((state) => state.stories)\r\n    const [isEdit, setEditMode] = useState(false);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [story, setStory] = useState<IStory>();\r\n\r\n    const initialValues: MyFormValues = {\r\n        title: '',\r\n        description: '',\r\n    };\r\n\r\n    useEffect(() => {\r\n        let _story = stories.find(s => s.id === id);\r\n        setStory(_story)\r\n        formik.setFieldValue('title', _story.title)\r\n        formik.setFieldValue('description', _story.description)\r\n    }, []);\r\n\r\n    const handleSave = () => {\r\n        // update story in stories only\r\n        let updatedStory = {\r\n            ...story,\r\n            title: formik.values.title,\r\n            description: formik.values.description\r\n        }\r\n        let tempStories = stories.filter(s => s.id !== id);\r\n        tempStories.push(updatedStory)\r\n        dispatch(setAll(tempStories))\r\n        navigate('/')\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        onSubmit: handleSave,\r\n\r\n    });\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"title\"\r\n                        value={formik.values.title}\r\n                        onChange={formik.handleChange(\"title\")}\r\n                        label=\"Title\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        disabled={!isEdit}\r\n                    />\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"description\"\r\n                        value={formik.values.description}\r\n                        onChange={formik.handleChange(\"description\")}\r\n                        label=\"Description\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        disabled={!isEdit}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <FormControl>\r\n                        <Button color=\"primary\" type=\"button\" disabled={isEdit} onClick={() => {\r\n                            setEditMode(true);\r\n                        }}>Edit</Button>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <Button color=\"primary\" type=\"submit\"\r\n                                disabled={isSubmitting || !isEdit}>Submit</Button>\r\n                    </FormControl>\r\n                    {isEdit\r\n                        ? (\r\n                            <Button color=\"primary\" type=\"button\" disabled={isSubmitting || !isEdit}\r\n                                    onClick={() => {\r\n                                        setEditMode(false);\r\n                                    }}>Cancel</Button>)\r\n                        : (<></>)\r\n                    }\r\n                </DialogActions>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {EditStory}","import * as React from 'react';\r\nimport {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Routes} from \"react-router-dom\";\r\nimport Lists from \"./routes/lists\";\r\nimport Layout from \"./components/Layout\";\r\nimport {Backlog} from \"./routes/Backlog\";\r\nimport {sagaActions} from \"./sagas/actions\";\r\nimport {useAppDispatch} from \"./redux/hooks\";\r\nimport {EditStory} from \"./routes/EditStory\";\r\n\r\nfunction App() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch({type: sagaActions.FETCH_COLUMNS_SAGA});\r\n        dispatch({type: sagaActions.FETCH_STORIES_SAGA});\r\n    }, [])\r\n\r\n    return (\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Layout/>}>\r\n                    <Route path=\"/\" element={<Lists/>}/>\r\n                    <Route path=\"/backlog\" element={<Backlog/>}/>\r\n                    <Route path=\"/stories/:id\" element={<EditStory/>}/>\r\n                </Route>\r\n            </Routes>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {call, put, takeLatest} from 'redux-saga/effects'\r\nimport {setAll} from '../redux/reducers/columnsSlice';\r\nimport {sagaActions} from \"./actions\";\r\nimport {ColumnService} from \"../services/column.service\";\r\n\r\nfunction* fetchColumns(): Generator<any, any, any> {\r\n    try {\r\n        const columnService = new ColumnService();\r\n        const columns = yield call(columnService.getColumns);\r\n        yield put(setAll(columns));\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction* mySaga() {\r\n    yield takeLatest(sagaActions.FETCH_COLUMNS_SAGA, fetchColumns);\r\n}\r\n\r\nexport default mySaga;","import {call, put, takeLatest} from 'redux-saga/effects'\r\nimport {setAll} from '../redux/reducers/storySlice';\r\nimport {sagaActions} from \"./actions\";\r\nimport {StoryService} from \"../services/story.service\";\r\n\r\nfunction* fetchStories(): Generator<any, any, any> {\r\n    try {\r\n        const storyService = new StoryService();\r\n        const stories = yield call(storyService.getStories);\r\n        yield put(setAll(stories));\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\n// to allow concurrent fetches of stories, use takeEvery instead of takeLatest\r\nfunction* mySaga() {\r\n    yield takeLatest(sagaActions.FETCH_STORIES_SAGA, fetchStories);\r\n}\r\n\r\nexport default mySaga;","import fetchColumns from './fetchColumns-saga';\r\nimport fetchStories from './fetchStories-saga';\r\nimport {all} from \"redux-saga/effects\";\r\n\r\nexport default function* IndexSagas() {\r\n    yield all([\r\n        fetchColumns(),\r\n        fetchStories()\r\n    ])\r\n}","import {combineReducers, configureStore, getDefaultMiddleware,} from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport {persistStore, persistReducer} from 'redux-persist';\r\nimport storySlice from \"./reducers/storySlice\";\r\nimport mySaga from '../sagas/index'\r\nimport {FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE} from \"redux-persist/es/constants\";\r\nimport columnsSlice from \"./reducers/columnsSlice\";\r\n// configuring saga middleware in app and connecting it to redux using redux toolkit\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst allReducers = combineReducers({\r\n    stories: storySlice,\r\n    columns: columnsSlice\r\n});\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage: storage,\r\n    whitelist: [\r\n        'stories',\r\n        'columns',\r\n    ]\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, allReducers);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    middleware: [...getDefaultMiddleware({ thunk: false,\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }), sagaMiddleware],\r\n})\r\n\r\nexport let persistor = persistStore(store)\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga);\r\n\r\nexport {store}\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {StyledEngineProvider} from '@mui/material/styles';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <StyledEngineProvider injectFirst>\r\n            <App/>\r\n        </StyledEngineProvider>\r\n    </Provider>, rootElement\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}